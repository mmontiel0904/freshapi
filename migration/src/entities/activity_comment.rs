//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "activity_comment")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    #[serde(skip_deserializing)]
    pub id: Uuid,
    pub activity_id: Uuid,
    pub content: String,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub mentions: Option<serde_json::Value>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub attachments: Option<serde_json::Value>,
    pub created_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::activity::Entity",
        from = "Column::ActivityId",
        to = "super::activity::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Activity,
}

impl Related<super::activity::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Activity.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}